"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRegions = exports.pauseProject = exports.deleteProject = exports.createProject = exports.getOrganizations = exports.getProjects = exports.getUsers = exports.createUser = exports.getSupabaseServiceRole = exports.getDatabasePassword = exports.getDatabaseHost = exports.getSupabaseId = exports.getSupabaseUrl = exports.replaceKong = exports.replaceEnv = exports.outputStatus = exports.getAccessKey = exports.getRemoteEnv = exports.getSupabaseEnv = void 0;
const fs_1 = require("fs");
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const dotenv_1 = require("dotenv");
const jwt_simple_1 = __importDefault(require("jwt-simple"));
const infrastructure_1 = require("../enums/infrastructure");
const getSupabaseEnv = async () => {
    const file = await fs_1.promises.readFile("supabase/docker/.env").catch(() => undefined);
    return file && (0, dotenv_1.parse)(file);
};
exports.getSupabaseEnv = getSupabaseEnv;
const getRemoteEnv = async () => {
    const file = await fs_1.promises.readFile("supabase/.env.remote").catch(() => undefined);
    return file && (0, dotenv_1.parse)(file);
};
exports.getRemoteEnv = getRemoteEnv;
const getAccessKey = async () => {
    const config = await (0, exports.getSupabaseEnv)();
    if (!config)
        return {};
    const { JWT_SECRET } = config;
    const ANON_KEY = jwt_simple_1.default.encode({
        role: "anon",
        iss: "supabase-demo",
    }, JWT_SECRET);
    const SERVICE_ROLE_KEY = jwt_simple_1.default.encode({
        role: "service_role",
        iss: "supabase-demo",
    }, JWT_SECRET);
    return { ANON_KEY, SERVICE_ROLE_KEY };
};
exports.getAccessKey = getAccessKey;
const outputStatus = async () => {
    const config = await (0, exports.getSupabaseEnv)();
    if (config) {
        const { STUDIO_PORT, KONG_HTTP_PORT, ANON_KEY, SERVICE_ROLE_KEY } = config;
        console.log(`STUDIO:   http://localhost:${STUDIO_PORT}/`);
        console.log(`REST API: http://localhost:${KONG_HTTP_PORT}/rest/v1/`);
        console.log(`GraphQL:  http://localhost:${KONG_HTTP_PORT}/graphql/v1`);
        console.log(`Mail:     http://localhost:9000/`);
        console.log(`ANON_KEY:\n ${ANON_KEY}`);
        console.log(`SERVICE_ROLE_KEY:\n ${SERVICE_ROLE_KEY}`);
    }
};
exports.outputStatus = outputStatus;
const replaceEnv = async () => {
    const fileName = "supabase/docker/.env";
    const { ANON_KEY, SERVICE_ROLE_KEY } = await (0, exports.getAccessKey)();
    const file = await fs_1.promises.readFile(fileName, "utf8").catch(() => undefined);
    if (file) {
        const newFile = file
            .replace(/^ANON_KEY=.*/m, `ANON_KEY=${ANON_KEY}`)
            .replace(/^SERVICE_ROLE_KEY=.*/m, `SERVICE_ROLE_KEY=${SERVICE_ROLE_KEY}`);
        newFile !== file && (await fs_1.promises.writeFile(fileName, newFile, "utf8"));
    }
};
exports.replaceEnv = replaceEnv;
const replaceKong = async () => {
    const fileName = "supabase/docker/volumes/api/kong.yml";
    const { ANON_KEY, SERVICE_ROLE_KEY } = await (0, exports.getAccessKey)();
    const file = await fs_1.promises.readFile(fileName, "utf8").catch(() => undefined);
    if (file) {
        const newFile = file
            .replace(/(- username: anon[\s\S]*?- key: )(.*)/m, `$1${ANON_KEY}`)
            .replace(/(- username: service_role[\s\S]*?- key: )(.*)/m, `$1${SERVICE_ROLE_KEY}`);
        newFile !== file && (await fs_1.promises.writeFile(fileName, newFile, "utf8"));
    }
};
exports.replaceKong = replaceKong;
const getSupabaseUrl = async () => (await (0, exports.getRemoteEnv)())?.url;
exports.getSupabaseUrl = getSupabaseUrl;
const getSupabaseId = async () => {
    const url = await (0, exports.getSupabaseUrl)();
    return url?.match(/https:\/\/(.*).supabase.co/)?.[1];
};
exports.getSupabaseId = getSupabaseId;
const getDatabaseHost = async () => {
    const id = await (0, exports.getSupabaseId)();
    return id && `db.${id}.supabase.co`;
};
exports.getDatabaseHost = getDatabaseHost;
const getDatabasePassword = async () => (await (0, exports.getRemoteEnv)())?.db_password;
exports.getDatabasePassword = getDatabasePassword;
const getSupabaseServiceRole = async () => (await (0, exports.getRemoteEnv)())?.service_role;
exports.getSupabaseServiceRole = getSupabaseServiceRole;
const createUser = async ({ url, apiKey, email, password, }) => {
    const body = JSON.stringify({
        email,
        password,
        email_confirm: true,
        user_metadata: { name: email },
    });
    const result = await (0, cross_fetch_1.default)(`${url}/auth/v1/admin/users/`, {
        method: "POST",
        body,
        headers: {
            "Content-Type": "text/plain;charset=UTF-8",
            accept: "application/json",
            apiKey,
            Authorization: `Bearer ${apiKey}`,
        },
    })
        .then((r) => r.json())
        .catch((e) => console.error(e));
    console.log(JSON.stringify(result, undefined, "  "));
};
exports.createUser = createUser;
const getUsers = async ({ url, apiKey, }) => {
    const result = await (0, cross_fetch_1.default)(`${url}/auth/v1/admin/users/`, {
        headers: {
            "Content-Type": "text/plain;charset=UTF-8",
            accept: "application/json",
            apiKey,
            Authorization: `Bearer ${apiKey}`,
        },
    })
        .then((r) => r.json())
        .catch((e) => console.error(e));
    console.log(JSON.stringify(result, undefined, "  "));
};
exports.getUsers = getUsers;
const getProjects = async (token) => {
    const result = await (0, cross_fetch_1.default)("https://api.supabase.io/v1/projects", {
        headers: {
            "Content-Type": "application/json",
            accept: "application/json",
            Authorization: `Bearer ${token}`,
        },
    })
        .then((r) => r.json())
        .catch((e) => console.error(e));
    return result;
};
exports.getProjects = getProjects;
const getOrganizations = async (token) => {
    const result = await (0, cross_fetch_1.default)("https://api.supabase.io/v1/organizations", {
        headers: {
            "Content-Type": "application/json",
            accept: "application/json",
            Authorization: `Bearer ${token}`,
        },
    })
        .then((r) => r.json())
        .catch((e) => console.error(e));
    return result || undefined;
};
exports.getOrganizations = getOrganizations;
const createProject = async ({ token, organizationId, name, dbPass, region, plan, }) => {
    const result = await (0, cross_fetch_1.default)("https://api.supabase.io/v1/projects", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            accept: "application/json",
            Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
            organization_id: organizationId,
            name,
            db_pass: dbPass,
            region,
            plan,
        }),
    })
        .then((r) => r.json())
        .catch((e) => console.error(e));
    console.log(JSON.stringify(result, undefined, "  "));
};
exports.createProject = createProject;
const deleteProject = async ({ token, id, }) => {
    const result = await (0, cross_fetch_1.default)(`https://api.supabase.io/platform/projects/${id}`, {
        method: "DELETE",
        headers: {
            accept: "application/json",
            Authorization: `Bearer ${token}`,
        },
    })
        .then((r) => r.json())
        .catch((e) => console.error(e));
    console.log(JSON.stringify(result, undefined, "  "));
};
exports.deleteProject = deleteProject;
const pauseProject = async ({ token, id, }) => {
    const result = await (0, cross_fetch_1.default)(`https://api.supabase.io/platform/projects/${id}/pause`, {
        method: "POST",
        headers: {
            accept: "application/json",
            Authorization: `Bearer ${token}`,
        },
    })
        .then((r) => r.json())
        .catch((e) => console.error(e));
    console.log(JSON.stringify(result, undefined, "  "));
};
exports.pauseProject = pauseProject;
const getRegions = () => {
    return Object.fromEntries(Object.entries(infrastructure_1.PROVIDERS.AWS.regions).map(([name, region]) => [
        region,
        infrastructure_1.REGIONS[name],
    ]));
};
exports.getRegions = getRegions;
