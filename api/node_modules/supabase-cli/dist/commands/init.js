"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = exports.initSupabase = void 0;
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const commander_1 = require("commander");
const github_1 = require("../libs/github");
const stdlibs_1 = require("../libs/stdlibs");
const supabase_1 = require("../libs/supabase");
const initSupabase = async (forced = false) => {
    if (!(0, stdlibs_1.isDirectory)("supabase") || forced) {
        await fs_1.promises.mkdir("supabase").catch(() => undefined);
        await (0, github_1.downloadGitHubFiles)("https://github.com/supabase/supabase", "master", "docker/", "supabase/docker", {
            onDownload: async (src, dest) => {
                if (path_1.default.basename(src) === ".gitignore") {
                    if (await fs_1.promises.stat(dest).catch(() => undefined)) {
                        return false;
                    }
                }
                return true;
            },
        });
        if (!(await fs_1.promises.stat("supabase/docker/.env").catch(() => undefined)))
            fs_1.promises.copyFile("supabase/docker/.env.example", "supabase/docker/.env");
        await fs_1.promises.writeFile("supabase/docker/dev/data.sql", "");
        await (0, github_1.downloadGitHubFiles)("https://github.com/supabase/storage-api", "master", "migrations/tenant/", "supabase/system-migrations/storage-api");
        await (0, github_1.downloadGitHubFiles)("https://github.com/supabase/gotrue", "master", "migrations", "supabase/system-migrations/gotrue");
        await (0, github_1.downloadGitHubFiles)("https://github.com/supabase/realtime", "master", "server/priv/repo/migrations", "supabase/system-migrations/realtime", {
            onDownload: (src) => {
                // stopgap measure
                return Number(src.match(/\/(\d+)_/)?.[1]) < 20220603231003;
            },
        });
        if (!(await fs_1.promises.stat("supabase/.env.remote").catch(() => undefined))) {
            fs_1.promises.writeFile("supabase/.env.remote", "url=\nservice_role=\ndb_password=\n", "utf8");
        }
        if (!(await fs_1.promises.stat("supabase/.gitignore").catch(() => undefined))) {
            fs_1.promises.writeFile("supabase/.gitignore", ".env.remote\n", "utf8");
        }
    }
    await (0, supabase_1.replaceEnv)();
    await (0, supabase_1.replaceKong)();
};
exports.initSupabase = initSupabase;
exports.init = commander_1.program
    .createCommand("init")
    .description("Initialize supabase")
    .action(() => {
    (0, exports.initSupabase)(true);
});
